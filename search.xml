<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/posts/202004220303.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<a id="more"></a>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>Hello</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Github Page搭建个人博客</title>
    <url>/posts/202004250006.html</url>
    <content><![CDATA[<p>使用的系统还是win10 64，在这整理下思路及搭建过程。</p>
<ul>
<li>使用Hexo创建本地博客</li>
<li>给Hexo安装NexT主题</li>
<li>修改外观及配置</li>
<li>在Github创建Repository</li>
<li>发布Hexo到远程GitHub</li>
<li>绑定自定义域名</li>
<li>完善及常用命令</li>
</ul>
<a id="more"></a>
<h3 id="使用Hexo创建本地博客">使用Hexo创建本地博客</h3>
<p>使用插件查看官网<a href="https://hexo.io/docs/" target="_blank" rel="noopener">文档</a>还是比较容易理解和可靠的，当前版本4.2.0。</p>
<h4 id="准备工作">准备工作</h4>
<p>使用Hexo之前，需要先安装<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a>再安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>。</p>
<p>安装完之后，鼠标右键桌面查看是否有 <code>Git Bash Here</code> 图标 ；如果没有的话，参考<a href="https://blog.csdn.net/niu9799/article/details/80755895" target="_blank" rel="noopener">这里</a>解决，因为接下来的命令基本都是在Git Bash里头操作。</p>
<p>鼠标右键桌面打开Git Bash，输入 <code>npm install hexo-cli -g</code> 回车安装Hexo；输入 <code>hexo -v</code> 验证Hexo是否安装成功，安装成功后先关闭Git Bash。</p>
<h4 id="创建本地博客">创建本地博客</h4>
<p>创建一个存放博客的文件夹，比如在C盘下创建文件夹 <code>blog</code>。</p>
<ul>
<li>右键 <code>blog</code>，打开Git Bash（所在位置显示MINGW64 /c/blog）</li>
<li>输入 <code>hexo init</code> 将blog文件夹初始化成一个博客文件夹，目录结构如下</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">|<span class="comment">-- node_modules</span></span><br><span class="line">|<span class="comment">-- scaffolds</span></span><br><span class="line">|<span class="comment">-- source</span></span><br><span class="line">|<span class="comment">-- themes</span></span><br><span class="line">|<span class="comment">-- .gitignore</span></span><br><span class="line">|<span class="comment">-- _config.yml</span></span><br><span class="line">|<span class="comment">-- package.json</span></span><br><span class="line">|<span class="comment">-- package-lock.json</span></span><br></pre></td></tr></table></figure>
<ul>
<li>输入 <code>npm install</code> 安装依赖包</li>
<li>输入 <code>hexo g</code> 生成（generate）网页；目录结构增加了 <code>public文件夹和db.json文件</code>。之后文件有改动的话，都需要重新生成一下</li>
<li>输入 <code>hexo s</code> 将生成的网页放在本地服务器（server）</li>
<li>浏览器里输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>， 就可以在本地查看博客了</li>
<li>按 <code>Ctrl+C</code> 关闭本地服务器</li>
</ul>
<h3 id="给Hexo安装NexT主题">给Hexo安装NexT主题</h3>
<p>Hexo主题有很多，这里选用NexT主题。惯例查看NexT<a href="https://theme-next.org/docs/getting-started/" target="_blank" rel="noopener">文档</a>，根据文档说明替换Hexo主题，并使用 <code>hexo clean</code> 清理下缓存，当前版本7.8.0。</p>
<h3 id="修改外观及配置">修改外观及配置</h3>
<p>主要是修改站点配置文件 <code>blog/_config.yml</code> 和主题配置文件 <code>/blog/themes/next/_config.yml</code>，可以查看官网文档对照修改，每一个配置都了解一下，需要注意的是<strong>冒号&quot;:&quot;之后要加空格</strong>。</p>
<h4 id="导航栏添加分类和标签栏目">导航栏添加分类和标签栏目</h4>
<ul>
<li>主题配置文件找到 <code>menu</code> 去掉 <code>tags</code> 和 <code>categories</code> 注释</li>
<li>使用<strong>创建页面</strong>命令 <code>hexo n page &quot;page name&quot;</code>，分别创建tags和categories两个页面</li>
<li>之后在 <code>blog/source/</code> 下多了tags和categories两个文件夹</li>
<li>修改 <code>blog/source/tags/index.md</code> 文件</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-23</span> <span class="number">09</span><span class="string">:19:37</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改 <code>blog/source/categories/index.md</code> 文件</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-23</span> <span class="number">09</span><span class="string">:19:55</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其它自定义页面类似，添加 <code>menu</code> 没列出的，还需要在语言文件 <code>blog/themes/next/languages/zh-CN.yml</code> 添加对应的中英文</li>
</ul>
<h4 id="Front-Matter模板">Front-Matter模板</h4>
<ul>
<li>添加文章时，自动添加更多front-matter内容，修改 <code>blog/scaffolds/post.md</code> 文件</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<ul>
<li>还可以添加置顶、评论等标识</li>
</ul>
<h4 id="新建文章">新建文章</h4>
<p>使用<strong>新建文章</strong>命令 <code>hexo n [post] &quot;post name&quot;</code> 创建文章，新建的文章存放在 <code>blog/source/_posts</code> 文件夹中，给文章设置标签和分类。</p>
<ul>
<li>类似Hexo配置文件中的写法</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">HTML</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">JavaScript</span></span><br></pre></td></tr></table></figure>
<ul>
<li>伪JavaScript数组写法</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tags:</span> <span class="string">[前端,Hexo,HTML,JavaScript]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>多个分类感觉没必要，写法类似，没试过</li>
</ul>
<h4 id="404页面">404页面</h4>
<p>使用创建页面命令创建404页面，之后修改 <code>blog/source/404/index.md</code> 文件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="number">404</span> <span class="string">Not</span> <span class="string">Found</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-24</span> <span class="number">15</span><span class="string">:54:58</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">/404</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="string">抱歉，您要找的页面不存在！</span></span><br></pre></td></tr></table></figure>
<h4 id="永久链接">永久链接</h4>
<p>对于个人添加文章时间间隔大于1分钟的情况下，下面这种做法还是蛮方便的。修改站点配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:year:month:day:hour:minute.html</span></span><br></pre></td></tr></table></figure>
<p>当然网上还有其他做法，安装 <code>hexo-abbrlink</code> 插件（安装包npm找不到了😂，依赖于标题）；或者添加front-matter标识-如pid，之后手动更改pid的值（每天pid都可以从1开始）。如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:year:month:day:pid.html</span></span><br></pre></td></tr></table></figure>
<p>不知道有没有比较好的办法？</p>
<h4 id="自定义样式">自定义样式</h4>
<p>主题配置文件找到 <code>custom_file_path</code>，按需取消注释并根据目录添加相应的文件。</p>
<p>注：刚开始改styl源文件的时候，不知道元素在哪个文件里，很不好找。后来想到电脑已经装有VS，用它查找整个解决方案就行了。</p>
<h4 id="其它配置">其它配置</h4>
<p>其它配置，如：搜索、浏览进度、加载进度、pjax、头像、访问统计、社交链接、备案信息、评论、代码复制等省略。</p>
<h3 id="在Github创建Repository">在Github创建Repository</h3>
<p>注册Github账号并创建新Repository，Repository name填入username.github.io，待设置完之后就可以通过username.github.io访问。</p>
<p>点击右上角的Setting找到GitHub Pages，Source选择master分支 ，主题随便选个（否则可能会提示GitHub Pages不可用）</p>
<h3 id="发布Hexo到远程GitHub">发布Hexo到远程GitHub</h3>
<ul>
<li>回到Git Bash，输入 <code>npm install hexo-deployer-git --save</code> 安装hexo-deployer-git</li>
<li>编辑 <code>blog/_config.yml</code></li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span> <span class="comment"># your repository url</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<ul>
<li>输入 <code>hexo d</code> 发布，首次如果提示键入用户名和邮箱，就输入之后再执行发布命令；最终得到 <code>INFO Deploy done: git</code> 即为部署成功</li>
<li>前往username.github.io查看</li>
</ul>
<h3 id="绑定自定义域名">绑定自定义域名</h3>
<ul>
<li>输入 <code>ping username.github.io</code> 获取Github Pages的主机的IP地址</li>
<li>域名解析添加一条A记录，主机为空值@，记录值为刚获取的IP地址</li>
<li>添加一条CNAME记录，主机为www，记录值为username.github.io</li>
<li>回到GitHub Pages在自定义域名里输入domian.com或者www.domain.com;如果域名支持HTTPS，则下方的复选框打勾</li>
<li>在 <code>blog/source/</code> 下添加一个名为<strong>CNAME</strong>没有任何后缀的文件，文件内容为domian.com或者www.domain.com，这个文件如果没添加的话，每次重新发布都需要再次设置自定义域名</li>
</ul>
<h3 id="完善及常用命令">完善及常用命令</h3>
<ul>
<li>Hexo建完文章自动打开Typora编辑器</li>
</ul>
<p>在 <code>blog/</code> 下添加 <code>scripts</code> 文件夹，文件夹里头添加 <code>auto_open.js</code> （名称随便），代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  spawn(<span class="string">'start  "C:\Program Files\Typora\Typora.exe" '</span> + data.path); <span class="comment">//编辑器的目标路径</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <code>&lt;!-- more --&gt;</code> 注释控制文章在首页要显示的内容</li>
<li>Hexo默认的Markdown渲染引擎hexo-renderer-marked改为hexo-renderer-markdown-it并添加表情支持，具体参考<a href="https://hasaik.com/posts/9b280ea3.html" target="_blank" rel="noopener">这里</a></li>
<li>渲染引擎更换后，可以设置 <code>&lt;br&gt;</code> 换行，也可以设置链接不自动生成</li>
<li>待博客完善后，之后添加文章的流程大概是：
<ul>
<li>桌面右击启动Git Bash</li>
<li>输入 <code>cd /c/blog</code> 定位到博客目录，也可以直接在博客目录右击启动Git Bash</li>
<li>执行新建文章命令</li>
<li>用Typora编辑文章</li>
<li>执行生成和发布命令</li>
</ul>
</li>
<li>常用命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"post name"</span> <span class="comment">#新建文章 有空格需要加双引号</span></span><br><span class="line">hexo new page <span class="string">"page name"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo new draft <span class="string">"draft name"</span> <span class="comment">#新建草稿</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br><span class="line">hexo deploy -g  <span class="comment">#生成加部署</span></span><br><span class="line">hexo server -g  <span class="comment">#生成加预览</span></span><br><span class="line">hexo clean <span class="comment">#清理缓存也即是删除public文件夹和db.json</span></span><br><span class="line">命令的简写</span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>
<br>
<p><strong>参考链接</strong></p>
<p><a href="https://eirunye.github.io/categories/Hexo/" target="_blank" rel="noopener">https://eirunye.github.io/categories/Hexo/</a><br>
<a href="https://www.jianshu.com/p/efbeddc5eb19" target="_blank" rel="noopener">https://www.jianshu.com/p/efbeddc5eb19</a><br>
<a href="https://blog.csdn.net/jiunian_2761/article/details/97388745" target="_blank" rel="noopener">https://blog.csdn.net/jiunian_2761/article/details/97388745</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github Page</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Typora+PicGo记笔记（win10 64）</title>
    <url>/posts/202004230126.html</url>
    <content><![CDATA[<p>先到官网<a href="https://www.typora.io/" target="_blank" rel="noopener">下载</a>Typora并安装，之后主要是对 <code>文件-偏好设置</code> 的修改</p>
<h3 id="外观">外观</h3>
<p>添加<strong>Catfish主题</strong></p>
<p><img data-src="https://5127.oss-cn-shenzhen.aliyuncs.com/github/20200421235858.png" alt=""></p>
<ul>
<li>点击 <code>获取主题</code> 打开主题链接，<a href="https://github.com/leaf-hsiao/catfish/archive/master.zip" target="_blank" rel="noopener">下载</a> <code>Catfish</code> 主题并解压</li>
<li><code>打开主题文件夹</code> 把刚解压的Catfish主题里头的 <code>Catfish文件夹</code> 及同级目录下的 <code>catfish.css</code> 文件复制到主题文件夹</li>
<li>重启下Typora，发现菜单栏主题多了一个Catfish可选项</li>
<li>如果还想折腾，可以使用 <code>视图-开发者工具</code> 修改css文件</li>
</ul>
<h3 id="图像">图像</h3>
<p>把粘贴进来的图片自动上传到阿里云OSS，方便别处也能查看图像（QQ截完图直接粘贴进来测试无效，可以使用拖拽或菜单栏点击插入本地图片）</p>
<a id="more"></a>
<p><img data-src="https://5127.oss-cn-shenzhen.aliyuncs.com/github/20200422002000.png" alt=""></p>
<ul>
<li>点击 <code>下载PicGo(app)</code> 跳至官网下载并安装</li>
<li>打开PicGo，<code>图床设置-阿里云OSS设置</code>，填写配置信息</li>
<li><code>PicGo设置</code> 为了让上传的<strong>文件不重名</strong>，需要打开上传前重命名</li>
<li>回到Typora，按上图设置下并<strong>重启</strong></li>
<li>之后点击 <code>验证图片上传选项</code> ，成功的话会上传两张图片并返回JSON提示</li>
<li>如果失败的话，需要到 <code>PicGo设置</code> 打开日志文件分析原因</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>PicGo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
